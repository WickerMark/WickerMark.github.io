---
title: "Generating the nth Prime Number"
description: "Python program which calculates an inputted nth prime number by dividing each consecutive number by previous prime numbers."
date: 08/14/2024
author: "Mark Watson"
categories: 
    - Python 
    - Prime Numbers 
---
The ability to generate prime numbers is important for a variety of tasks, most notably, cryptography, the RSA algorithm for instance, in psuedo-random number generation and benchmarking algorithms.

Numpy will be used for the square root function later in the code. 

An array used to store the prime numbers is created and the first two prime numbers are stored.

Number, the variable used to represent the current number to be checked if it is prime, is set to 3. This means that the counter, used to represent how many prime numbers have been found, is set to 2, since 3 is the second prime number.
```{python}
import numpy as np

prime_list = [2, 3]
number = 3
counter = 2

```
The prime number to be generated can be set to anything, but for this example, I have used 1000. This means that the while loop will continue to iterate until the counter is no longer less than 1000.

The variable number is first incremented by 2 (to emit all even numbers since these cannot be prime). 

A new variable, called prime, stores a boolean value which states if a number is prime or not. Initially, prime is set to True. 

A for loop is used to check if number is divisible by previous prime numbers.

The square root function is used here because if the index of the prime number to be checked is greater than the square root of the number, it is not a factor. If this statement is true, the code breaks out of the for loop.

Here, I use the modulo operator to determine if the number has a remainder when dividing by previous prime numbers. If it does, the number is determined as a composite number, and so prime is set to False.

The final if statement is used such that if the number was determined to be prime, the counter would be incremented, and the number would be appended to the list of prime numbers so that future numbers can be checked against it.

Finally, counter is cast as a string and concatenated to output the nth prime number.
```{python}
while counter < 1000:
    number += 2
    prime = True
    for i in prime_list:
        if i > np.sqrt(number):
            break
        elif number % i == 0:
            prime = False
            break
    
    if prime == True:
        counter += 1
        prime_list.append(number)
print("The", str(counter) + "th prime number is", number)
```